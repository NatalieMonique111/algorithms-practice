//#409 in leet
//https://leetcode.com/problems/longest-palindrome/

// You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
// Return the minimum number of steps to make the given string empty.
// A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
// A string is called palindrome if is one that reads the same backward as well as forward.

// Example 1:

// Input: s = "ababa"
// Output: 1
// Explanation: s is already a palindrome, so its entirety can be removed in a single step.
// Example 2:

// Input: s = "abb"
// Output: 2
// Explanation: "abb" -> "bb" -> "". 
// Remove palindromic subsequence "a" then "bb".
// Example 3:

// Input: s = "baabb"
// Output: 2
// Explanation: "baabb" -> "b" -> "". 
// Remove palindromic subsequence "baab" then "b".
 
// Constraints:

// 1 <= s.length <= 1000
// s[i] is either 'a' or 'b'.

let longestPalindrome = function(s) {
    
    // create a new Set that will hold only unique characters
    // a set can only have unique characters, you cannot have duplicate characters
    
    const palSet = new Set();
    
    // set the length of the longest palindrome to 0,
    // we will add as we go along
    
    let longestPalindrome = 0;
    
    // loop through the string "s" 
    
    for (let char of s) {
        
        // if the Set already has the character ...
        
        if(palSet.has(char)){
            
            // add to the length of the longest palindrome by 2 ...
            
            longestPalindrome = longestPalindrome + 2;
            
            // then delete that character from the Set
            
            palSet.delete(char);
            
        // otherwise, add the unique/unmatched character to the Set ...
            
        } else palSet.add(char);
    }
    // if the number of characters in the Set is above 0 ...
    
    if(palSet.size > 0) {
        
        // return the length of the longest palindrome plus 1
        // you can only have one "odd" character in the palindrome
        
        return longestPalindrome + 1;
    }
    // otherwise just return the length of the longest palindrome
    return longestPalindrome;
};